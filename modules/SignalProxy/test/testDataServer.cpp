//autogenerated file SignalProxy
//created at:Do 25. Jul 21:39:04 2013

#include "testDataServer.h"

testDataServer::testDataServer(QIODevice& readDevice, QIODevice& writeDevice)
	: SignalProxy(readDevice, writeDevice)
{}

void testDataServer::logMessage(QString data)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << QUuid("{74100c32-6a18-49ba-b4dd-b325ac701051}");
	stream << data;
	transmitSignal(msgData);
}

void testDataServer::logError(QString data)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << QUuid("{21071990-05e5-4d0d-b294-a660c920fbfa}");
	stream << data;
	transmitSignal(msgData);
}

void testDataServer::userRequest(uint id, QString name)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << QUuid("{93f134b8-9574-44be-ab53-a5ec75fc37fe}");
	stream << id;
	stream << name;
	transmitSignal(msgData);
}

void testDataServer::processRemoteInputs(const QByteArray& data)
{
	QDataStream stream(data);
	QUuid id;
	stream >> id;

	if(id == QUuid("{1ec4627e-f40a-4fbd-86cb-4db9ddcb4039}")) {
		uint id;
		QVariant button;
		QVariant result;
		stream >> id;
		stream >> button;
		stream >> result;
		emit userRequestAnswer(id, button, result);
		return;
	}

	SignalProxy::handleError(id);
}
