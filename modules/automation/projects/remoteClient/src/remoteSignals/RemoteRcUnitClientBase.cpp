//qtRemoteSignals auto generated file
//do not edit this file; if needed subclass it or create a decorator
#include "RemoteRcUnitClientBase.h"

RemoteRcUnitClientBase::RemoteRcUnitClientBase(QIODevice* writeDevice, QIODevice* readDevice, bool initialize)
	: RemoteSignals(Q_UINT64_C(0xb8b4f561830eace),Q_UINT64_C(0xdaaf949ad3148f67), readDevice, writeDevice, initialize)
{}

void RemoteRcUnitClientBase::listUnits()
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << RemoteSignals::version() << RemoteSignals::gid1() << RemoteSignals::gid2() << (int)1;
	transmitSignal(msgData);
}

void RemoteRcUnitClientBase::callMethod(uint callId, const QByteArray& unit, const QByteArray& method, const QVariantList& params)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << RemoteSignals::version() << RemoteSignals::gid1() << RemoteSignals::gid2() << (int)3;
	stream << callId;
	stream << unit;
	stream << method;
	stream << params;
	transmitSignal(msgData);
}

void RemoteRcUnitClientBase::enableTelecontrol(const QString& unitName)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << RemoteSignals::version() << RemoteSignals::gid1() << RemoteSignals::gid2() << (int)6;
	stream << unitName;
	transmitSignal(msgData);
}

void RemoteRcUnitClientBase::disableTelecontrol(const QString& unitName)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << RemoteSignals::version() << RemoteSignals::gid1() << RemoteSignals::gid2() << (int)7;
	stream << unitName;
	transmitSignal(msgData);
}

void RemoteRcUnitClientBase::handleTcData(const QMap<int, double>& data)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << RemoteSignals::version() << RemoteSignals::gid1() << RemoteSignals::gid2() << (int)8;
	stream << data;
	transmitSignal(msgData);
}

void RemoteRcUnitClientBase::setTcButton(int buttonId, const bool& pressed)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << RemoteSignals::version() << RemoteSignals::gid1() << RemoteSignals::gid2() << (int)9;
	stream << buttonId;
	stream << pressed;
	transmitSignal(msgData);
}

void RemoteRcUnitClientBase::processRemoteInputs(const QByteArray& data)
{
	QDataStream stream(data);
	int remoteSignalVersion = 0;
	quint64 remoteSignalGid1 = 0;
	quint64 remoteSignalGid2 = 0;
	int remoteSignalMethodId = 0;
	stream >> remoteSignalVersion >> remoteSignalGid1 >> remoteSignalGid2 >> remoteSignalMethodId;
	RemoteSignals::checkId(remoteSignalVersion, remoteSignalGid1, remoteSignalGid2);

	if(remoteSignalMethodId == 2) {
		QList<RcUnitHelp> units;
		stream >> units;
		emit unitList(units);
		return;
	}
	if(remoteSignalMethodId == 4) {
		uint callId;
		QString error;
		stream >> callId;
		stream >> error;
		emit methodError(callId, error);
		return;
	}
	if(remoteSignalMethodId == 5) {
		uint callId;
		QVariant result;
		stream >> callId;
		stream >> result;
		emit methodResponse(callId, result);
		return;
	}

	RemoteSignals::handleError(remoteSignalMethodId);
}
