//qtRemoteSignals auto generated file
//do not edit this file; if needed subclass it or create a decorator
#include "TestDataClient.h"

TestDataClient::TestDataClient(QIODevice* writeDevice, QIODevice* readDevice, bool initialize)
	: RemoteSignals(Q_UINT64_C(0xe7a9f0687899fa6),Q_UINT64_C(0x44a1ab36a7026130), readDevice, writeDevice, initialize)
{}

void TestDataClient::logMessage(const QString& data)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << RemoteSignals::version() << RemoteSignals::gid1() << RemoteSignals::gid2() << (int)1;
	stream << data;
	transmitSignal(msgData);
}

void TestDataClient::logError(const QString& data)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << RemoteSignals::version() << RemoteSignals::gid1() << RemoteSignals::gid2() << (int)2;
	stream << data;
	transmitSignal(msgData);
}

void TestDataClient::echo(const QString& text)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << RemoteSignals::version() << RemoteSignals::gid1() << RemoteSignals::gid2() << (int)3;
	stream << text;
	transmitSignal(msgData);
}

void TestDataClient::processRemoteInputs(const QByteArray& data)
{
	QDataStream stream(data);
	int remoteSignalVersion = 0;
	quint64 remoteSignalGid1 = 0;
	quint64 remoteSignalGid2 = 0;
	int remoteSignalMethodId = 0;
	stream >> remoteSignalVersion >> remoteSignalGid1 >> remoteSignalGid2 >> remoteSignalMethodId;
	RemoteSignals::checkId(remoteSignalVersion, remoteSignalGid1, remoteSignalGid2);

	if(remoteSignalMethodId == 4) {
		QString text;
		stream >> text;
		emit echoAnswer(text);
		return;
	}

	RemoteSignals::handleError(remoteSignalMethodId);
}
