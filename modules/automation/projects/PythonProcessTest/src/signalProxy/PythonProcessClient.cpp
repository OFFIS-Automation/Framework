//autogenerated file SignalProxy
#include "PythonProcessClient.h"

PythonProcessClient::PythonProcessClient(QIODevice& readDevice, QIODevice& writeDevice)
	: SignalProxy(Q_UINT64_C(0xdd89e4eb77ff1df),Q_UINT64_C(0xc8b1ef4247070a2a), readDevice, writeDevice)
{}

void PythonProcessClient::exit()
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)1;
	transmitSignal(msgData);
}

void PythonProcessClient::echoService(const QString& text)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)2;
	stream << text;
	transmitSignal(msgData);
}

void PythonProcessClient::start(const QString& fileName, const QString& baseDir)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)4;
	stream << fileName;
	stream << baseDir;
	transmitSignal(msgData);
}

void PythonProcessClient::addBreakpoint(const QString& file, uint line)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)5;
	stream << file;
	stream << line;
	transmitSignal(msgData);
}

void PythonProcessClient::removeBreakpoint(const QString& file, int line)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)6;
	stream << file;
	stream << line;
	transmitSignal(msgData);
}

void PythonProcessClient::resume()
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)7;
	transmitSignal(msgData);
}

void PythonProcessClient::stepOver()
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)8;
	transmitSignal(msgData);
}

void PythonProcessClient::stepInto()
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)9;
	transmitSignal(msgData);
}

void PythonProcessClient::stepReturn()
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)10;
	transmitSignal(msgData);
}

void PythonProcessClient::quit()
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)11;
	transmitSignal(msgData);
}

void PythonProcessClient::processRemoteInputs(const QByteArray& data)
{
	QDataStream stream(data);
	quint64 signalProxyGid1 = 0;
	quint64 signalProxyGid2 = 0;
	int signalProxyMethodId = 0;
	stream >> signalProxyGid1 >> signalProxyGid2 >> signalProxyMethodId;
	SignalProxy::checkId(signalProxyGid1, signalProxyGid2);

	if(signalProxyMethodId == 3) {
		QString text;
		int number;
		stream >> text;
		stream >> number;
		emit echo(text, number);
		return;
	}
	if(signalProxyMethodId == 12) {
		QString file;
		int line;
		stream >> file;
		stream >> line;
		emit scriptPaused(file, line);
		return;
	}
	if(signalProxyMethodId == 13) {
		QString message;
		stream >> message;
		emit printText(message);
		return;
	}
	if(signalProxyMethodId == 14) {
		QString error;
		stream >> error;
		emit printError(error);
		return;
	}
	if(signalProxyMethodId == 15) {
		int id;
		QString name;
		int maximum;
		stream >> id;
		stream >> name;
		stream >> maximum;
		emit createProgress(id, name, maximum);
		return;
	}
	if(signalProxyMethodId == 16) {
		int id;
		int progress;
		stream >> id;
		stream >> progress;
		emit updateProgress(id, progress);
		return;
	}
	if(signalProxyMethodId == 17) {
		int id;
		stream >> id;
		emit removeProgress(id);
		return;
	}
	if(signalProxyMethodId == 18) {
		int id;
		QString title;
		QStringList names;
		stream >> id;
		stream >> title;
		stream >> names;
		emit createInfoPanel(id, title, names);
		return;
	}
	if(signalProxyMethodId == 19) {
		int id;
		QStringList values;
		stream >> id;
		stream >> values;
		emit updateInfoPanel(id, values);
		return;
	}
	if(signalProxyMethodId == 20) {
		int id;
		stream >> id;
		emit removeInfoPanel(id);
		return;
	}
	if(signalProxyMethodId == 21) {
		emit clearInfo();
		return;
	}
	if(signalProxyMethodId == 22) {
		QString infoStr;
		stream >> infoStr;
		emit appendInfo(infoStr);
		return;
	}
	if(signalProxyMethodId == 23) {
		UserRequest request;
		stream >> request;
		emit userRequest(request);
		return;
	}

	SignalProxy::handleError(signalProxyMethodId);
}
