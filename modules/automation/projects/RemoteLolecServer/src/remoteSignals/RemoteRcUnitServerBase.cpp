//qtRemoteSignals auto generated file
//do not edit this file; if needed subclass it or create a decorator
#include "RemoteRcUnitServerBase.h"

RemoteRcUnitServerBase::RemoteRcUnitServerBase(QIODevice* readDevice, QIODevice* writeDevice, bool initialize)
	: RemoteSignals(Q_UINT64_C(0xb8b4f561830eace),Q_UINT64_C(0xdaaf949ad3148f67), readDevice, writeDevice, initialize)
{}

void RemoteRcUnitServerBase::unitList(const QList<RcUnitHelp>& units)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << RemoteSignals::version() << RemoteSignals::gid1() << RemoteSignals::gid2() << (int)2;
	stream << units;
	transmitSignal(msgData);
}

void RemoteRcUnitServerBase::methodError(uint callId, const QString& error)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << RemoteSignals::version() << RemoteSignals::gid1() << RemoteSignals::gid2() << (int)4;
	stream << callId;
	stream << error;
	transmitSignal(msgData);
}

void RemoteRcUnitServerBase::methodResponse(uint callId, const QVariant& result)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << RemoteSignals::version() << RemoteSignals::gid1() << RemoteSignals::gid2() << (int)5;
	stream << callId;
	stream << result;
	transmitSignal(msgData);
}

void RemoteRcUnitServerBase::processRemoteInputs(const QByteArray& data)
{
	QDataStream stream(data);
	int remoteSignalVersion = 0;
	quint64 remoteSignalGid1 = 0;
	quint64 remoteSignalGid2 = 0;
	int remoteSignalMethodId = 0;
	stream >> remoteSignalVersion >> remoteSignalGid1 >> remoteSignalGid2 >> remoteSignalMethodId;
	RemoteSignals::checkId(remoteSignalVersion, remoteSignalGid1, remoteSignalGid2);

	if(remoteSignalMethodId == 1) {
		emit listUnits();
		return;
	}
	if(remoteSignalMethodId == 3) {
		uint callId;
		QByteArray unit;
		QByteArray method;
		QVariantList params;
		stream >> callId;
		stream >> unit;
		stream >> method;
		stream >> params;
		emit callMethod(callId, unit, method, params);
		return;
	}
	if(remoteSignalMethodId == 6) {
		QString unitName;
		stream >> unitName;
		emit enableTelecontrol(unitName);
		return;
	}
	if(remoteSignalMethodId == 7) {
		QString unitName;
		stream >> unitName;
		emit disableTelecontrol(unitName);
		return;
	}
	if(remoteSignalMethodId == 8) {
		QMap<int, double> data;
		stream >> data;
		emit handleTcData(data);
		return;
	}
	if(remoteSignalMethodId == 9) {
		int buttonId;
		bool pressed;
		stream >> buttonId;
		stream >> pressed;
		emit setTcButton(buttonId, pressed);
		return;
	}

	RemoteSignals::handleError(remoteSignalMethodId);
}
