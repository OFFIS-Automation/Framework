//autogenerated file SignalProxy
#include "PythonProcessServer.h"

PythonProcessServer::PythonProcessServer(QIODevice& readDevice, QIODevice& writeDevice)
	: SignalProxy(Q_UINT64_C(0xdd89e4eb77ff1df),Q_UINT64_C(0xc8b1ef4247070a2a), readDevice, writeDevice)
{}

void PythonProcessServer::echo(const QString& text, int number)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)3;
	stream << text;
	stream << number;
	transmitSignal(msgData);
}

void PythonProcessServer::scriptPaused(const QString& file, int line)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)12;
	stream << file;
	stream << line;
	transmitSignal(msgData);
}

void PythonProcessServer::printText(const QString& message)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)13;
	stream << message;
	transmitSignal(msgData);
}

void PythonProcessServer::printError(const QString& error)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)14;
	stream << error;
	transmitSignal(msgData);
}

void PythonProcessServer::createProgress(int id, const QString& name, int maximum)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)15;
	stream << id;
	stream << name;
	stream << maximum;
	transmitSignal(msgData);
}

void PythonProcessServer::updateProgress(int id, int progress)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)16;
	stream << id;
	stream << progress;
	transmitSignal(msgData);
}

void PythonProcessServer::removeProgress(int id)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)17;
	stream << id;
	transmitSignal(msgData);
}

void PythonProcessServer::createInfoPanel(int id, const QString& title, const QStringList& names)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)18;
	stream << id;
	stream << title;
	stream << names;
	transmitSignal(msgData);
}

void PythonProcessServer::updateInfoPanel(int id, const QStringList& values)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)19;
	stream << id;
	stream << values;
	transmitSignal(msgData);
}

void PythonProcessServer::removeInfoPanel(int id)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)20;
	stream << id;
	transmitSignal(msgData);
}

void PythonProcessServer::clearInfo()
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)21;
	transmitSignal(msgData);
}

void PythonProcessServer::appendInfo(const QString& infoStr)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)22;
	stream << infoStr;
	transmitSignal(msgData);
}

void PythonProcessServer::userRequest(const UserRequest& request)
{
	QByteArray msgData;
	QDataStream stream(&msgData, QIODevice::WriteOnly);
	stream << SignalProxy::gid1() << SignalProxy::gid2() << (int)23;
	stream << request;
	transmitSignal(msgData);
}

void PythonProcessServer::processRemoteInputs(const QByteArray& data)
{
	QDataStream stream(data);
	quint64 signalProxyGid1 = 0;
	quint64 signalProxyGid2 = 0;
	int signalProxyMethodId = 0;
	stream >> signalProxyGid1 >> signalProxyGid2 >> signalProxyMethodId;
	SignalProxy::checkId(signalProxyGid1, signalProxyGid2);

	if(signalProxyMethodId == 1) {
		emit exit();
		return;
	}
	if(signalProxyMethodId == 2) {
		QString text;
		stream >> text;
		emit echoService(text);
		return;
	}
	if(signalProxyMethodId == 4) {
		QString fileName;
		QString baseDir;
		stream >> fileName;
		stream >> baseDir;
		emit start(fileName, baseDir);
		return;
	}
	if(signalProxyMethodId == 5) {
		QString file;
		uint line;
		stream >> file;
		stream >> line;
		emit addBreakpoint(file, line);
		return;
	}
	if(signalProxyMethodId == 6) {
		QString file;
		int line;
		stream >> file;
		stream >> line;
		emit removeBreakpoint(file, line);
		return;
	}
	if(signalProxyMethodId == 7) {
		emit resume();
		return;
	}
	if(signalProxyMethodId == 8) {
		emit stepOver();
		return;
	}
	if(signalProxyMethodId == 9) {
		emit stepInto();
		return;
	}
	if(signalProxyMethodId == 10) {
		emit stepReturn();
		return;
	}
	if(signalProxyMethodId == 11) {
		emit quit();
		return;
	}

	SignalProxy::handleError(signalProxyMethodId);
}
