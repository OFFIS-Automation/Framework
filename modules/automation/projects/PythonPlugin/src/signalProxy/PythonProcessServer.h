//qtRemoteSignals auto generated file
//do not edit this file; if needed subclass it or create a decorator
//md5 hash: f2f75e3ccf9da834ff4a04019050c92
#ifndef PYTHONPROCESSSERVER_H
#define PYTHONPROCESSSERVER_H

#include "RemoteSignals.h"
#include <core/UserRequest.h>
#include <core/ScriptException.h>

class PythonProcessServer : public RemoteSignals
{
	Q_OBJECT
public:
	PythonProcessServer(QIODevice* readDevice, QIODevice* writeDevice = 0, bool initialize = false);
signals:
	void addBreakpoint(const QString& file, int line);
	void removeBreakpoint(const QString& file, int line);
	void resume();
	void stepOver();
	void stepInto();
	void stepReturn();
	void quit();
	void rcUnitResult(int id, const QVariant& result);
	void rcUnitException(int id, const QString& error);
	void requestCallStack();

public slots:
	void scriptPaused(const QString& file, int line);
	void printText(const QString& message);
	void printError(const QString& error);
	void createProgress(int id, const QString& name, int maximum);
	void updateProgress(int id, int progress);
	void removeProgress(int id);
	void createInfoPanel(int id, const QString& title, const QStringList& names);
	void updateInfoPanel(int id, const QStringList& values);
	void removeInfoPanel(int id);
	void clearInfo();
	void appendInfo(const QString& infoStr);
	void userRequest(const UserRequest& request);
	void userRequestAbort(int id);
	void raiseException(const ScriptException& error);
	void callRcUnit(int id, const QByteArray& unit, const QByteArray& method, const QVariantList& params);
	void updateCallStack(const QList<TraceLine>& trace);

private:
	void processRemoteInputs(const QByteArray& data);
};

#endif //PYTHONPROCESSSERVER_H
